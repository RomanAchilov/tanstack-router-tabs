/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TabsRouteRouteImport } from './routes/tabs/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TabsTabCIndexRouteImport } from './routes/tabs/tab-c/index'
import { Route as TabsTabBIndexRouteImport } from './routes/tabs/tab-b/index'
import { Route as TabsTabAIndexRouteImport } from './routes/tabs/tab-a/index'

const TabsRouteRoute = TabsRouteRouteImport.update({
  id: '/tabs',
  path: '/tabs',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TabsTabCIndexRoute = TabsTabCIndexRouteImport.update({
  id: '/tab-c/',
  path: '/tab-c/',
  getParentRoute: () => TabsRouteRoute,
} as any)
const TabsTabBIndexRoute = TabsTabBIndexRouteImport.update({
  id: '/tab-b/',
  path: '/tab-b/',
  getParentRoute: () => TabsRouteRoute,
} as any)
const TabsTabAIndexRoute = TabsTabAIndexRouteImport.update({
  id: '/tab-a/',
  path: '/tab-a/',
  getParentRoute: () => TabsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tabs': typeof TabsRouteRouteWithChildren
  '/tabs/tab-a': typeof TabsTabAIndexRoute
  '/tabs/tab-b': typeof TabsTabBIndexRoute
  '/tabs/tab-c': typeof TabsTabCIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tabs': typeof TabsRouteRouteWithChildren
  '/tabs/tab-a': typeof TabsTabAIndexRoute
  '/tabs/tab-b': typeof TabsTabBIndexRoute
  '/tabs/tab-c': typeof TabsTabCIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tabs': typeof TabsRouteRouteWithChildren
  '/tabs/tab-a/': typeof TabsTabAIndexRoute
  '/tabs/tab-b/': typeof TabsTabBIndexRoute
  '/tabs/tab-c/': typeof TabsTabCIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/tabs' | '/tabs/tab-a' | '/tabs/tab-b' | '/tabs/tab-c'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tabs' | '/tabs/tab-a' | '/tabs/tab-b' | '/tabs/tab-c'
  id:
    | '__root__'
    | '/'
    | '/tabs'
    | '/tabs/tab-a/'
    | '/tabs/tab-b/'
    | '/tabs/tab-c/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TabsRouteRoute: typeof TabsRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tabs': {
      id: '/tabs'
      path: '/tabs'
      fullPath: '/tabs'
      preLoaderRoute: typeof TabsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tabs/tab-c/': {
      id: '/tabs/tab-c/'
      path: '/tab-c'
      fullPath: '/tabs/tab-c'
      preLoaderRoute: typeof TabsTabCIndexRouteImport
      parentRoute: typeof TabsRouteRoute
    }
    '/tabs/tab-b/': {
      id: '/tabs/tab-b/'
      path: '/tab-b'
      fullPath: '/tabs/tab-b'
      preLoaderRoute: typeof TabsTabBIndexRouteImport
      parentRoute: typeof TabsRouteRoute
    }
    '/tabs/tab-a/': {
      id: '/tabs/tab-a/'
      path: '/tab-a'
      fullPath: '/tabs/tab-a'
      preLoaderRoute: typeof TabsTabAIndexRouteImport
      parentRoute: typeof TabsRouteRoute
    }
  }
}

interface TabsRouteRouteChildren {
  TabsTabAIndexRoute: typeof TabsTabAIndexRoute
  TabsTabBIndexRoute: typeof TabsTabBIndexRoute
  TabsTabCIndexRoute: typeof TabsTabCIndexRoute
}

const TabsRouteRouteChildren: TabsRouteRouteChildren = {
  TabsTabAIndexRoute: TabsTabAIndexRoute,
  TabsTabBIndexRoute: TabsTabBIndexRoute,
  TabsTabCIndexRoute: TabsTabCIndexRoute,
}

const TabsRouteRouteWithChildren = TabsRouteRoute._addFileChildren(
  TabsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TabsRouteRoute: TabsRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
