/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AutoIndexRouteImport } from './routes/auto/index'
import { Route as AutoTabsRouteRouteImport } from './routes/auto/tabs/route'
import { Route as AutoTabsTabCIndexRouteImport } from './routes/auto/tabs/tab-c/index'
import { Route as AutoTabsTabBIndexRouteImport } from './routes/auto/tabs/tab-b/index'
import { Route as AutoTabsTabAIndexRouteImport } from './routes/auto/tabs/tab-a/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AutoIndexRoute = AutoIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AutoRouteRoute,
} as any)
const AutoTabsRouteRoute = AutoTabsRouteRouteImport.update({
  id: '/tabs',
  path: '/tabs',
  getParentRoute: () => AutoRouteRoute,
} as any)
const AutoTabsTabCIndexRoute = AutoTabsTabCIndexRouteImport.update({
  id: '/tab-c/',
  path: '/tab-c/',
  getParentRoute: () => AutoTabsRouteRoute,
} as any)
const AutoTabsTabBIndexRoute = AutoTabsTabBIndexRouteImport.update({
  id: '/tab-b/',
  path: '/tab-b/',
  getParentRoute: () => AutoTabsRouteRoute,
} as any)
const AutoTabsTabAIndexRoute = AutoTabsTabAIndexRouteImport.update({
  id: '/tab-a/',
  path: '/tab-a/',
  getParentRoute: () => AutoTabsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auto/tabs': typeof AutoTabsRouteRouteWithChildren
  '/auto/': typeof AutoIndexRoute
  '/auto/tabs/tab-a': typeof AutoTabsTabAIndexRoute
  '/auto/tabs/tab-b': typeof AutoTabsTabBIndexRoute
  '/auto/tabs/tab-c': typeof AutoTabsTabCIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auto/tabs': typeof AutoTabsRouteRouteWithChildren
  '/auto': typeof AutoIndexRoute
  '/auto/tabs/tab-a': typeof AutoTabsTabAIndexRoute
  '/auto/tabs/tab-b': typeof AutoTabsTabBIndexRoute
  '/auto/tabs/tab-c': typeof AutoTabsTabCIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auto/tabs': typeof AutoTabsRouteRouteWithChildren
  '/auto/': typeof AutoIndexRoute
  '/auto/tabs/tab-a/': typeof AutoTabsTabAIndexRoute
  '/auto/tabs/tab-b/': typeof AutoTabsTabBIndexRoute
  '/auto/tabs/tab-c/': typeof AutoTabsTabCIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auto/tabs'
    | '/auto/'
    | '/auto/tabs/tab-a'
    | '/auto/tabs/tab-b'
    | '/auto/tabs/tab-c'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auto/tabs'
    | '/auto'
    | '/auto/tabs/tab-a'
    | '/auto/tabs/tab-b'
    | '/auto/tabs/tab-c'
  id:
    | '__root__'
    | '/'
    | '/auto/tabs'
    | '/auto/'
    | '/auto/tabs/tab-a/'
    | '/auto/tabs/tab-b/'
    | '/auto/tabs/tab-c/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auto/': {
      id: '/auto/'
      path: '/'
      fullPath: '/auto/'
      preLoaderRoute: typeof AutoIndexRouteImport
      parentRoute: typeof AutoRouteRoute
    }
    '/auto/tabs': {
      id: '/auto/tabs'
      path: '/tabs'
      fullPath: '/auto/tabs'
      preLoaderRoute: typeof AutoTabsRouteRouteImport
      parentRoute: typeof AutoRouteRoute
    }
    '/auto/tabs/tab-c/': {
      id: '/auto/tabs/tab-c/'
      path: '/tab-c'
      fullPath: '/auto/tabs/tab-c'
      preLoaderRoute: typeof AutoTabsTabCIndexRouteImport
      parentRoute: typeof AutoTabsRouteRoute
    }
    '/auto/tabs/tab-b/': {
      id: '/auto/tabs/tab-b/'
      path: '/tab-b'
      fullPath: '/auto/tabs/tab-b'
      preLoaderRoute: typeof AutoTabsTabBIndexRouteImport
      parentRoute: typeof AutoTabsRouteRoute
    }
    '/auto/tabs/tab-a/': {
      id: '/auto/tabs/tab-a/'
      path: '/tab-a'
      fullPath: '/auto/tabs/tab-a'
      preLoaderRoute: typeof AutoTabsTabAIndexRouteImport
      parentRoute: typeof AutoTabsRouteRoute
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
